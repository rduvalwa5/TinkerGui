https://www.tutorialspoint.com/python/python_gui_programming.htm


Tkinter Programming
Tkinter is the standard GUI library for Python. Python when combined with Tkinter provides a fast and easy way 
to create GUI applications. Tkinter provides a powerful object-oriented interface to the Tk GUI toolkit.

Creating a GUI application using Tkinter is an easy task. All you need to do is perform the following steps âˆ’

	- Import the Tkinter module.
	- Create the GUI application main window.
	- Add one or more of the above-mentioned widgets to the GUI application.
	- Enter the main event loop to take action against each event triggered by the user.

Example
	#!/usr/bin/python

	import tkinter
	top = tkinter.Tk()
	# Code to add widgets will go here...
	top.mainloop()
	
*********************************************************************************************************	
	
Tkinter Widgets
	There are currently 15 types of widgets in Tkinter. We present these widgets as well as a brief description 
	in the following table âˆ’

	Operator		Description
	Button			The Button widget is used to display buttons in your application.
	Canvas			The Canvas widget is used to draw shapes, such as lines, ovals, polygons and rectangles, 
					in your application.
	Checkbutton		The Checkbutton widget is used to display a number of options as checkboxes. 
					The user can select multiple options at a time.
	Entry			The Entry widget is used to display a single-line text field for accepting values 
					from a user.
	Frame			The Frame widget is used as a container widget to organize other widgets.
	Label			The Label widget is used to provide a single-line caption for other widgets. 
					It can also contain images.
	Listbox			The Listbox widget is used to provide a list of options to a user.
	Menubutton		The Menubutton widget is used to display menus in your application.
	Menu			The Menu widget is used to provide various commands to a user. These commands are 
					contained inside Menubutton.
	Message			The Message widget is used to display multiline text fields for accepting values from a user.
	Radiobutton		The Radiobutton widget is used to display a number of options as radio buttons. 
					The user can select only one option at a time.
	Scale			The Scale widget is used to provide a slider widget.
	Scrollbar		The Scrollbar widget is used to add scrolling capability to various widgets, 
					such as list boxes.
	Text			The Text widget is used to display text in multiple lines.
	Toplevel		The Toplevel widget is used to provide a separate window container.
	Spinbox			The Spinbox widget is a variant of the standard Tkinter Entry widget, which can be 
					used to select from a fixed number of values.
	PanedWindow		A PanedWindow is a container widget that may contain any number of panes, arranged 
					horizontally or vertically.
	LabelFrame		A labelframe is a simple container widget. Its primary purpose is to act as a spacer 
					or container for complex window layouts.
	tkMessageBox	This module is used to display message boxes in your applications.
	
*********************************************************************************************************

Standard attributes
	Let us take a look at how some of their common attributes.such as sizes, colors and fonts are specified.

	Dimensions		https://www.tutorialspoint.com/python/tk_dimensions.htm
	Colors			https://www.tutorialspoint.com/python/tk_colors.htm
	Fonts			https://www.tutorialspoint.com/python/tk_fonts.htm
	Anchors			https://www.tutorialspoint.com/python/tk_anchors.htm
	Relief styles  	https://www.tutorialspoint.com/python/tk_relief.htm
	Bitmaps  		https://www.tutorialspoint.com/python/tk_bitmaps.htm
	Cursors  		https://www.tutorialspoint.com/python/tk_cursors.htm

*********************************************************************************************************

Geometry Management
	All Tkinter widgets have access to specific geometry management methods, which have the purpose of 
	organizing widgets throughout the parent widget area. Tkinter exposes the following geometry manager 
	classes: pack, grid, and place.

	The pack() Method - This geometry manager organizes widgets in blocks before placing 
						them in the parent widget.
						https://www.tutorialspoint.com/python/tk_pack.htm

	The grid() Method - This geometry manager organizes widgets in a table-like structure in the 
						parent widget.
						https://www.tutorialspoint.com/python/tk_grid.htm

	The place() Method -This geometry manager organizes widgets by placing them in a specific 
						position in the parent widget.
						https://www.tutorialspoint.com/python/tk_place.htm

*********************************************************************************************************

Python Tkinter Button
	The Button widget is used to add buttons in a Python application. 
	These buttons can display text or images that convey the purpose of the buttons. 
	You can attach a function or a method to a button which is called automatically 
	when you click the button.
		
	Syntax
	Here is the simple syntax to create this widget âˆ’

		w = Button ( master, option=value, ... )

	Parameters
	master: 	This represents the parent window.
	options: 	Here is the list of most commonly used options for this widget. 
				These options can be used as key-value pairs separated by commas.

	Option				Description
	activebackground	Background color when the button is under the cursor.
	activeforeground	Foreground color when the button is under the cursor.
	bd					Border width in pixels. Default is 2.
	bg					Normal background color.

	command			Function or method to be called when the button is clicked.
	fg					Normal foreground (text) color.
	font				Text font to be used for the button's label.
	height				Height of the button in text lines (for textual buttons) or pixels (for images).
	highlightcolor		The color of the focus highlight when the widget has focus.
	image				Image to be displayed on the button (instead of text).
	justify				How to show multiple text lines: LEFT to left-justify each line; 
						CENTER to center them; or RIGHT to right-justify.
	padx				Additional padding left and right of the text.
	pady				Additional padding above and below the text.
	relief				Relief specifies the type of the border. Some of the values are SUNKEN, 
						RAISED, GROOVE, and RIDGE.
	state				Set this option to DISABLED to gray out the button and make it unresponsive. 
						Has the value ACTIVE when the mouse is over it. Default is NORMAL.
	underline			Default is -1, meaning that no character of the text on the button will be 
						underlined. If nonnegative, the corresponding text character will be underlined.
	width				Width of the button in letters (if displaying text) or pixels (if displaying an 
						image).
	wraplength			If this value is set to a positive number, the text lines will be wrapped to fit 
						within this length.

	Methods		Following are commonly used methods for this widget âˆ’
	Method			Description
	flash()		Causes the button to flash several times between active and normal colors. 
				Leaves the button in the state it was in originally. Ignored if the button is disabled.
	invoke()	Calls the button's callback, and returns what that function returns. 
				Has no effect if the button is disabled or there is no callback.	

*********************************************************************************************************
		
Python Tkinter Canvas
	The Canvas is a rectangular area intended for drawing pictures or other complex layouts. 
	You can place graphics, text, widgets or frames on a Canvas.

	Syntax
	Here is the simple syntax to create this widget âˆ’

 	w = Canvas ( master, option=value, ... )

	Parameters:
	master: This represents the parent window.

	options: 	Here is the list of most commonly used options for this widget. 
				These options can be used as key-value pairs separated by commas.

	Option				Description
	bd					Border width in pixels. Default is 2.
	bg					Normal background color.
	confine				If true (the default), the canvas cannot be scrolled outside of the scrollregion.
	cursor				Cursor used in the canvas like arrow, circle, dot etc.
	height				Size of the canvas in the Y dimension.
	highlightcolor		Color shown in the focus highlight.
	relief				Relief specifies the type of the border. Some of the values are SUNKEN, RAISED, 
						GROOVE, and RIDGE.
	scrollregion		A tuple (w, n, e, s) that defines over how large an area the canvas can be scrolled,
						where w is the left side, n the top, e the right side, and s the bottom.
	width				Size of the canvas in the X dimension.
	xscrollincrement	If you set this option to some positive dimension, the canvas can be positioned only
						on multiples of that distance, and the value will be used for scrolling by scrolling 
						units, such as when the user clicks on the arrows at the ends of a scrollbar.
	xscrollcommand		If the canvas is scrollable, this attribute should be the .set() method of 
						the horizontal scrollbar.
	yscrollincrement	Works like xscrollincrement, but governs vertical movement.
	yscrollcommand		If the canvas is scrollable, this attribute should be the .set() method of the vertical scrollbar.

	The Canvas widget can support the following standard items:
	arc 		Creates an arc item, which can be a chord, a pieslice or a simple arc.
	
		coord = 10, 50, 240, 210
		arc = canvas.create_arc(coord, start=0, extent=150, fill="blue")
	
	image 		Creates an image item, which can be an instance of either the BitmapImage or 
				the PhotoImage classes.

		filename = PhotoImage(file = "sunshine.gif")
		image = canvas.create_image(50, 50, anchor=NE, image=filename)

	line 	 	Creates a line item.

		line = canvas.create_line(x0, y0, x1, y1, ..., xn, yn, options)
	
	oval 		Creates a circle or an ellipse at the given coordinates. 
				It takes two pairs of coordinates; the top left and bottom right corners of 
				the bounding rectangle for the oval.

		oval = canvas.create_oval(x0, y0, x1, y1, options)

	polygon		Creates a polygon item that must have at least three vertices.

		oval = canvas.create_polygon(x0, y0, x1, y1,...xn, yn, options)	
	
*********************************************************************************************************

Python Tkinter Checkbutton
	The Checkbutton widget is used to display a number of options to a user as toggle buttons. 
	The user can then select one or more options by clicking the button corresponding to each option.
	You can also display images in place of text.

	Syntax
	Here is the simple syntax to create this widget âˆ’

	w = Checkbutton ( master, option, ... )

	Parameters:
	master: This represents the parent window.

	options: 
	Here is the list of most commonly used options for this widget. 
	These options can be used as key-value pairs separated by commas.

	Option				Description
	activebackground	Background color when the checkbutton is under the cursor.
	activeforeground	Foreground color when the checkbutton is under the cursor.
	bg					The normal background color displayed behind the label and indicator.
	bitmap				To display a monochrome image on a button.
	bd					The size of the border around the indicator. Default is 2 pixels.
	command				A procedure to be called every time the user changes the state of this 
						checkbutton.
	cursor				If you set this option to a cursor name (arrow, dot etc.), the mouse cursor
						will change to that pattern when it is over the checkbutton.
	disabledforeground	The foreground color used to render the text of a disabled checkbutton. The 
						default is a stippled version of the default foreground color.
	font				The font used for the text.
	fg					The color used to render the text.
	height				The number of lines of text on the checkbutton. Default is 1.
	highlightcolor		The color of the focus highlight when the checkbutton has the focus.
	image				To display a graphic image on the button.
	justify				If the text contains multiple lines, this option controls how the text is 
						justified: CENTER, LEFT, or RIGHT.
	offvalue			Normally, a checkbutton's associated control variable will be set to 0 when 
						it is cleared (off). You can supply an alternate value for the off state by 
						setting offvalue to that value.
	onvalue				Normally, a checkbutton's associated control variable will be set to 1 when 
						it is set (on). You can supply an alternate value for the on state by setting
						onvalue to that value.
	padx				How much space to leave to the left and right of the checkbutton and text. 
						Default is 1 pixel.
	pady				How much space to leave above and below the checkbutton and text. 
						Default is 1 pixel.
	relief				With the default value, relief=FLAT, the checkbutton does not stand out from 
						its background. You may set this option to any of the other styles
	selectcolor			The color of the checkbutton when it is set. Default is selectcolor="red".
	selectimage			If you set this option to an image, that image will appear in the checkbutton when it is set.
	state				The default is state=NORMAL, but you can use state=DISABLED to gray out the control and make it unresponsive. If the cursor is currently over the checkbutton, the state is ACTIVE.
	text				The label displayed next to the checkbutton. Use newlines ("\n") to display multiple lines of text.
	underline			With the default value of -1, none of the characters of the text label are underlined. Set this option to the index of a character in the text (counting from zero) to underline that character.
	variable			The control variable that tracks the current state of the checkbutton. Normally this variable is an IntVar, and 0 means cleared and 1 means set, but see the offvalue and onvalue options above.
	width				The default width of a checkbutton is determined by the size of the displayed 
						image or text. You can set this option to a number of characters and the checkbutton 
						will always have room for that many characters.
	wraplength			Normally, lines are not wrapped. You can set this option to a number of characters 
						and all lines will be broken into pieces no longer than that number.

	Methods
	Following are commonly used methods for this widget âˆ’

	Medthod				Description
	deselect()			Clears (turns off) the checkbutton.
	flash()				Flashes the checkbutton a few times between its active and normal colors, 
						but leaves it the way it started.
	invoke()			You can call this method to get the same actions that would occur if the user clicked on the checkbutton to change its state.
	select()			Sets (turns on) the checkbutton.
	toggle()			Clears the checkbutton if set, sets it if cleared.
	
	
*********************************************************************************************************
	
Python Tkinter Entry
	The Entry widget is used to accept single-line text strings from a user.
	- If you want to display multiple lines of text that can be edited, then you should use the 
	  Text widget.
	- If you want to display one or more lines of text that cannot be modified by the user, 
	  then you should use the Label widget.

	Syntax
	Here is the simple syntax to create this widget âˆ’

	w = Entry( master, option, ... )

	Parameters:
	master: This represents the parent window.

	options: 
		- Here is the list of most commonly used options for this widget. 
		- These options can be used as key-value pairs separated by commas.

	Option				Description
	bg					The normal background color displayed behind the label and indicator.
	bd					The size of the border around the indicator. Default is 2 pixels.
	command				A procedure to be called every time the user changes the state of this checkbutton.
	cursor				If you set this option to a cursor name (arrow, dot etc.), the mouse cursor will 
						change to that pattern when it is over the checkbutton.
	font				The font used for the text.
	exportselection		By default, if you select text within an Entry widget, it is automatically exported to the clipboard. 
						To avoid this exportation, use exportselection=0.
	fg					The color used to render the text.
	highlightcolor		The color of the focus highlight when the checkbutton has the focus.
	justify				If the text contains multiple lines, this option controls how the text is justified:
						CENTER, LEFT, or RIGHT.
	relief				With the default value, relief=FLAT, the checkbutton does not stand out from its background. You may 
						set this option to any of the other styles
	selectbackground	The background color to use displaying selected text.
	selectborderwidth	The width of the border to use around selected text. The default is one pixel.
	selectforeground	The foreground (text) color of selected text.
	show				Normally, the characters that the user types appear in the entry. To make a .password. entry that 
						echoes each character as an asterisk, set show="*".
	state				The default is state=NORMAL, but you can use state=DISABLED to gray out the control and make it unresponsive. 
						If the cursor is currently over the checkbutton, the state is ACTIVE.
	textvariable		In order to be able to retrieve the current text from your entry widget, you must set this option to an 
						instance of the StringVar class.
	width				The default width of a checkbutton is determined by the size of the displayed image or text. You can set this
						option to a number of characters and the checkbutton will always have room for that many characters.
	xscrollcommand		If you expect that users will often enter more text than the onscreen size of the widget, you can link your 
						entry widget to a scrollbar.

	Methods
		Following are commonly used methods for this widget âˆ’

	Medthod						Description
	delete (first,last=None)	Deletes characters from the widget, starting with the one at index first, up to but not including 
								the character at position last. If the second argument is omitted, only the single character at 
								position first is deleted.
	get()						Returns the entry's current text as a string.
	icursor (index)				Set the insertion cursor just before the character at the given index.
	index (index)				Shift the contents of the entry so that the character at the given index is the leftmost visible 
								character. Has no effect if the text fits entirely within the entry.
	insert (index,s)			Inserts string s before the character at the given index.
	select_adjust (index)		This method is used to make sure that the selection includes the character at the specified index.
	select_clear()				Clears the selection. If there isn't currently a selection, has no effect.
	select_from (index)			Sets the ANCHOR index position to the character selected by index, and selects that character.
	select_present()			If there is a selection, returns true, else returns false.
	select_range (start,end)	Sets the selection under program control. Selects the text starting at the start index, up to but not 
								including the character at the end index. The start position must be before the end position.
	select_to (index)			Selects all the text from the ANCHOR position up to but not including the character at the given index.
	xview (index)				This method is useful in linking the Entry widget to a horizontal scrollbar.
	xview_scroll(number,what)	Used to scroll the entry horizontally. The what argument must be either UNITS, to scroll by character 
								widths, or PAGES, to scroll by chunks the size of the entry widget. The number is positive to scroll 
								left to right, negative to scroll right to left.	
								
*********************************************************************************************************

Python Tkinter Frame
	The Frame widget is very important for the process of grouping and organizing other widgets in a somehow
	friendly way. It works like a container, which is responsible for arranging the position of other widgets.
	- It uses rectangular areas in the screen to organize the layout and to provide padding of these widgets. 
	  A frame can also be used as a foundation class to implement complex widgets.

	Syntax
		Here is the simple syntax to create this widget âˆ’

 		w = Frame ( master, option, ... )

	Parameters
		master: This represents the parent window.

	options: 
		Here is the list of most commonly used options for this widget. 
		These options can be used as key-value pairs separated by commas.

	Option					Description
	bg						The normal background color displayed behind the label and indicator.
	bd						The size of the border around the indicator. Default is 2 pixels.
	cursor					If you set this option to a cursor name (arrow, dot etc.), the mouse cursor will change to that
							pattern when it is over the checkbutton.
	height					The vertical dimension of the new frame.
	highlightbackground		Color of the focus highlight when the frame does not have focus.
	highlightcolor			Color shown in the focus highlight when the frame has the focus.
	highlightthickness		Thickness of the focus highlight.
	relief					With the default value, relief=FLAT, the checkbutton does not stand out from its background. 
							You may set this option to any of the other styles
	width					The default width of a checkbutton is determined by the size of the displayed image or text. 
							You can set this option to a number of characters and the checkbutton will always have room for 
							that many characters.

*********************************************************************************************************

Python Tkinter Label
	This widget implements a display box where you can place text or images. 
	The text displayed by this widget can be updated at any time you want.
	- It is also possible to underline part of the text (like to identify a keyboard shortcut) 
	  and span the text across multiple lines.

	Syntax
	Here is the simple syntax to create this widget âˆ’

	w = Label ( master, option, ... )

	Parameters:
		master: This represents the parent window.

	options: 
		Here is the list of most commonly used options for this widget. 
		These options can be used as key-value pairs separated by commas.

	Option			Description
	anchor			This options controls where the text is positioned if the widget has more space than the text needs. 
					The default is anchor=CENTER, which centers the text in the available space.
	bg				The normal background color displayed behind the label and indicator.
	bitmap			Set this option equal to a bitmap or image object and the label will display that graphic.
	bd				The size of the border around the indicator. Default is 2 pixels.
	cursor			If you set this option to a cursor name (arrow, dot etc.), the mouse cursor will change to that pattern
					when it is over the checkbutton.
	font			If you are displaying text in this label (with the text or textvariable option, the font option specifies
					in what font that text will be displayed.
	fg				If you are displaying text or a bitmap in this label, this option specifies the color of the text. 
					If you are displaying a bitmap, this is the color that will appear at the position of the 1-bits in the bitmap.
	height			The vertical dimension of the new frame.
	image			To display a static image in the label widget, set this option to an image object.
	justify			Specifies how multiple lines of text will be aligned with respect to each other: LEFT for flush left, CENTER for centered (the default), or RIGHT for right-justified.
	padx			Extra space added to the left and right of the text within the widget. Default is 1.
	pady			Extra space added above and below the text within the widget. Default is 1.
	relief			Specifies the appearance of a decorative border around the label. The default is FLAT; for other values.
	text			To display one or more lines of text in a label widget, set this option to a string containing the text. 
					Internal newlines ("\n") will force a line break.
	textvariable	To slave the text displayed in a label widget to a control variable of class StringVar, set this option to that 
					variable.
	underline		You can display an underline (_) below the nth letter of the text, counting from 0, by setting this option to n. 
					The default is underline=-1, which means no underlining.
	width			Width of the label in characters (not pixels!). If this option is not set, the label will be sized to fit its 
					contents.
	wraplength		You can limit the number of characters in each line by setting this option to the desired number. The default 
					value, 0, means that lines will be broken only at newlines.

*********************************************************************************************************
Python Tkinter Scrollbar
	This widget provides a slide controller that is used to implement vertical scrolled widgets, 
	such as Listbox, Text and Canvas. Note that you can also create horizontal scrollbars on 
	Entry widgets.

	Syntax
			w = Scrollbar ( master, option, ... )

	Parameters
		master: This represents the parent window.

		options:
		These options can be used as key-value pairs separated by commas.

		Option				Description

		activebackground	The color of the slider and arrowheads when the mouse is over them.

		bg					The color of the slider and arrowheads when the mouse is not over them.

		bd					The width of the 3-d borders around the entire perimeter of the trough, 
							and also the width of the 3-d effects on the arrowheads and slider. 
							Default is no border around the trough, and a 2-pixel border around the arrowheads 
							and slider.
		command				A procedure to be called whenever the scrollbar is moved.

		cursor				The cursor that appears when the mouse is over the scrollbar.

		elementborderwidth	The width of the borders around the arrowheads and slider. The default is elementborderwidth=-1,
							 which means to use the value of the borderwidth option.

		highlightbackground	The color of the focus highlight when the scrollbar does not have focus.

		highlightcolor		The color of the focus highlight when the scrollbar has the focus.

		highlightthickness	The thickness of the focus highlight. Default is 1. Set to 0 to suppress display of the focus highlight.

		jump				This option controls what happens when a user drags the slider. Normally (jump=0),
							every small drag of the slider causes the command callback to be called. If you set 
							this option to 1, the callback isn't called until the user releases the mouse button.

		orient				Set orient=HORIZONTAL for a horizontal scrollbar, orient=VERTICAL for a vertical one.
		
		repeatdelay			This option controls how long button 1 has to be held down in the trough before the 
							slider starts moving in that direction repeatedly. 
							Default is repeatdelay=300, and the units are milliseconds.

		repeatinterval		repeatinterval
		
		takefocus			Normally, you can tab the focus through a scrollbar widget. Set takefocus=0 if you
							don't want this behavior.

		troughcolor			The color of the trough.

		width				Width of the scrollbar (its y dimension if horizontal, and its x dimension if vertical). Default is 16.

		Methods
		Scrollbar objects have these methods −

		Methods				Description
		get()				Returns two numbers (a, b) describing the current position of the slider. 
							The a value gives the position of the left or top edge of the slider, for horizontal
							and vertical scrollbars respectively; the b value gives the position of the right or 
							bottom edge.

		set( first, last )	To connect a scrollbar to another widget w, set w's xscrollcommand or yscrollcommand 
							to the scrollbar's set() method. The arguments have the same meaning as the values 
							returned by the get() method.					
					
*********************************************************************************************************					